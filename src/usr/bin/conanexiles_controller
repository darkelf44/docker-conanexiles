#!/bin/bash

source /var/lib/conanexiles/redis_cmds.sh
source /var/lib/conanexiles/notifier.sh

APPID=443030
APPID_Mods=440900

# In Seconds
SHUTDOWN_TIME_MULTI_NODE=60

# MODS
MODS_INSTALL_SCRIPT="/tmp/mods-install.sh"
## Mods via workshop will be installed to workshop/content/$APPID_Mods
MODS_MODLIST_FILE="/conanexiles/ConanSandbox/Mods/modlist.txt"


function get_available_build() {
    # clear appcache (to avoid reading infos from cache)
    rm -rf /root/Steam/appcache

    # get available build id and return it
    local _build_id=$(/steamcmd/steamcmd.sh +login anonymous +app_info_update 1 +app_info_print $APPID +quit | \
                    grep -EA 1000 "^\s+\"branches\"$" | grep -EA 5 "^\s+\"public\"$" | \
                    grep -m 1 -EB 10 "^\s+}" | grep -E "^\s+\"buildid\"\s+" | \
                    tr '[:blank:]"' ' ' | awk '{print $2}')

    echo "$_build_id"
}

function get_installed_build() {
    # get currently installed build id and return it
    local _build_id=$(cat /conanexiles/steamapps/appmanifest_$APPID.acf | \
              grep -E "^\s+\"buildid\"" |  tr '[:blank:]"' ' ' | awk '{print $2}')

    echo "$_build_id"
}

check_server_running() {
    if ps axg | grep -F 'ConanSandboxServer' | grep -v -F 'grep' > /dev/null; then
        echo 0
    else
        echo 1
    fi
}

function start_server() {
    # check if server is already running to avoid running it more than one time
    if [[ $(check_server_running) == 0 ]];then
        notifier_warn "Tried to start server. Server is already running..."
        return
    else
        supervisorctl status conanexilesServer | grep RUNNING > /dev/null
        [[ $? != 0 ]] && supervisorctl start conanexilesServer
    fi
}

function stop_server() {
    # stop the server
    supervisorctl status conanexilesServer | grep RUNNING > /dev/null
    [[ $? == 0 ]] && supervisorctl stop conanexilesServer

    # wait until the server process is gone
    while ps axg | grep -F 'ConanSandboxServer' | grep -v -F 'grep' > /dev/null; do
      notifier_error "Can't stop the server! Trying to terminate it directly..."
	  WINEPREFIX=/wine wineserver -k
      sleep 5
    done
}

function update_server() {
    # update server
    supervisorctl status conanexilesUpdate | grep RUNNING > /dev/null
    [[ $? != 0 ]] && supervisorctl start conanexilesUpdate
}

function backup_server() {
    # backup the server db and config
    if [ -z $CONANEXILES_INSTANCENAME ]
    then
        local _src="/conanexiles/ConanSandbox/${CONANEXILES_INSTANCENAME}"
        local _dst="/conanexiles/ConanSandbox/${CONANEXILES_INSTANCENAME}.build-$(get_installed_build).backup"
    else
        local _src="/conanexiles/ConanSandbox/Saved"
        local _dst="/conanexiles/ConanSandbox/Saved.build-$(get_installed_build).backup"
    fi

    # remove backup dir if already exists (should never happen)
    if [ -d "$_dst" ]; then
        rm -rf "$_dst"
        notifier_info "Removed existing build backup in $_dst"
    fi

    # backup current build db and config
    if [ -d "$_src" ]; then
        cp -a "$_src" "$_dst"

        # Was backup successfull ?
        if [ $? -eq 0 ]; then
            notifier_info "Backed up current build db and configs to $_dst"
        else
            notifier_warn "Failed to backup current build db and configs to $_dst."
        fi
    fi
}

start_shutdown_timer() {
    _t_val="$1"
    _i=0

    while true; do
        if [ $_i == "$_t_val" ]; then
            break
        fi

        notifier_debug "Shutdown Server in $((_t_val - _i)) minutes"

        if [[ ${CONANEXILES_Game_RconPlugin_RconEnabled} == 1 ]]; then
            # Only notify at the start, and at 15, 5, 1 minutes left
            _time_left=$(( _t_val - _i ))
            ([[ $_i == 0 ]] || [[ $_time_left == 15 ]] || [[ $_time_left == 5 ]] || [[ $_time_left == 1 ]]) && \
                        /usr/bin/rconcli broadcast --type shutdown --value $_time_left
        fi
        sleep 60
        ((_i++))
    done
}

function do_update() {
    # This function take either 0 for update with sleep, or 1 for update without sleep and backup
    # logic: stop, backup, update, update mods and start again the server

    redis_cmd_proxy redis_set_update_running_start

    if [[ $1 == 1 ]];then
        update_server
    else
        # Feature Issue #36
        [[ -z "${CONANEXILES_UPDATE_SHUTDOWN_TIMER}" ]] && CONANEXILES_UPDATE_SHUTDOWN_TIMER=15
        start_shutdown_timer "${CONANEXILES_UPDATE_SHUTDOWN_TIMER}"
        stop_server
        # Give other instances time to shutdown
        sleep $SHUTDOWN_TIME_MULTI_NODE
        backup_server
        update_server
    fi

    # wait till update is finished
    while $(supervisorctl status conanexilesUpdate | grep RUNNING > /dev/null); do
        sleep 1
    done

    # check if server is up to date
    local _ab=$(get_available_build)
    local _ib=$(get_installed_build)

    if [[ $_ab != "$_ib" ]];then
        echo "Warning: Update seems to have failed. Installed build ($_ib) does not match available build ($_ab)."
    else
        echo "Info: Updated to build ($_ib) successfully."
    fi

    install_mods

    # Notify other server that update has been finished
    redis_cmd_proxy redis_set_update_running_stop

    start_server
}

function do_restart() {
    # Stop server
    if [[ $1 == 1 ]];then
        stop_server
    else
        # Feature Issue #36
        [[ -z "${CONANEXILES_RESTART_SHUTDOWN_TIMER}" ]] && CONANEXILES_RESTART_SHUTDOWN_TIMER=15
        start_shutdown_timer "${CONANEXILES_RESTART_SHUTDOWN_TIMER}"
        stop_server
    fi

    start_server
}

generate_modscript() {
    # This Function generates the script, which will be executed to install the mods
    # NOTE: file /conanexiles/ConanSandbox/Mods/mods.txt for modids
    # Param 1: array of modIDs

    modids=("$@")

    echo """
@sSteamCmdForcePlatformType windows
login anonymous
force_install_dir /conanexiles
""" > $MODS_INSTALL_SCRIPT

    for modid in "${modids[@]}"
    do
        # skip any comment lines
        [[ "$modid" =~ ^#.*$ ]] && continue

        # remove any suffix, i.e 12345678 # My Mod Bla => modid: 12345678
        modid=$(echo $modid | cut -f 1 -d ' ')

        echo "workshop_download_item $APPID_Mods $modid" >> $MODS_INSTALL_SCRIPT
    done

    echo "quit" >> $MODS_INSTALL_SCRIPT
}

install_mods() {
    #  Skip if not mods are set
    if [ -z $CONANEXILES_MODS ]
    then
        notifier_info "Skipping Mods Installation. No Mods are specified via CONANEXILES_MODS"
        return
    fi

    # Read modids from env
    IFS=',' read -r -a modids <<< "$CONANEXILES_MODS"

    # Create the install script for installation
    generate_modscript "${modids[@]}"

    notifier_info "Installing Mods"
    /steamcmd/steamcmd.sh +runscript $MODS_INSTALL_SCRIPT

    # Create Modlist dir if not present
    local _dir="$(dirname ${MODS_MODLIST_FILE})"
    [ -d $_dir ] || mkdir -p $_dir

    # Clean modlist to not have multiple entries
    echo > $MODS_MODLIST_FILE

    IFS=$'\n'

    for modid in "${modids[@]}"
    do

        notifier_info "Got mod with id $modid"

        if [ -d /conanexiles/steamapps/workshop/content/$APPID_Mods/$modid ]
        then
            for filename in $(cd /conanexiles/steamapps/workshop/content/$APPID_Mods/$modid && find -name "*.pak")
            do

                filename="$(basename "$filename")"

                notifier_info "Enabling Mod $modid. Adding pak-file for mod: '$filename'"
                # We need the Wine Path
                echo "Z:/conanexiles/steamapps/workshop/content/$APPID_Mods/$modid/$filename" >> $MODS_MODLIST_FILE

            done
        fi
    done

    unset IFS
}

update_check() {
    # This function is comparing the build ids of installed vs last steam version
    # return 0 if new build available
    # return 1 if no new build available

    ab=$(get_available_build)
    # If we fail to retrieve the buildid return
    if [ -z $ab ]
    then
        notifier_error "Failed to retrieve buildID from Steam. Aborting update_check"
        return 1
    fi

    ib=$(get_installed_build)

    if [[ $ab != "$ib" ]];then
        notifier_info "New build available: $ib -> $ab"
        return 0
    fi
    return 1
}

restart_check() {
    # This function checks, then updates the timestamp for the next periodic server restart
    # Restart times in the list will use the GNU date format. The first call used to initialize $restart_time,
    # and allways returns true.

    # If the time for the next restart is valid and not yet passed, return error
	local format="%Y-%m-%d %H:%M:%S"
    local now=$(date "+$format")
    if [ ! -z "$restart_time" ] && [[ "$restart_time" == NEVER || "$now" < "$restart_time" ]]; then
        return 1
    fi

    # Regex strings
	local rtime='(([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|([1-9]|1[012])(:[0-5][0-9])?(:[0-5][0-9])?[[:space:]]+(am|pm))'
	local rweek='(((mon|tue|wed|thu|fri|sat|sun)[.]?|(monday|tuesday|wednesday|thursday|friday|saturday|sunday))?[[:space:]]+'$rtime')'

    # Read restarts from env
    IFS=',' read -r -a restarts <<< "$CONANEXILES_RESTARTS"

    # Calculate the time for the next restart
    restart_time=NEVER
    for rs in "${restarts[@]}"
    do
        # Calculate restart time
        if [[ ${rs,,} =~ ^[[:space:]]*$rtime[[:space:]]*$ ]]; then
            # Time of day
            local time=$(date -d "$rs" "+$format")
            local next=$(date -d "$rs + 1 day" "+$format")
        elif [[ ${rs,,} =~ ^[[:space:]]*$rweek[[:space:]]*$ ]]; then
            # Time of week
            local time=$(date -d "$rs" "+$format")
            local next=$(date -d "$rs + 1 week" "+$format")
        else
            local time=
            local next=
        fi

        # Update next restart time
        if [ ! -z "$time" ] && [[ "$now" < "$time" && "$time" < "$restart_time" ]]; then
            restart_time=$time
        elif [ ! -z "$next" ] && [[ "$now" < "$next" && "$next" < "$restart_time" ]]; then
            restart_time=$next
        fi
    done
	
	# Log restart times
    notifier_info "Current Time: $now. Next restart is scheduled at: $restart_time"

    # Return success to signal restart
    return 0
}

start_master_loop() {

    notifier_info "Mode: Master - Instance: $(hostname)"

    # Inital Installation
    if [ ! -f "/conanexiles/ConanSandboxServer.exe" ] || [ ! -f "/conanexiles/ConanSandbox/Saved/sqlite3.exe" ]
    then
        notifier_warn "No binaries found. Doing a fresh installation"
        # Run update without shutdown timer
        do_update 1
        notifier_debug "Initial installation finished."
    else
        # Do initial update if new version available
        # If there is no update, try to update mods separatly
        (update_check && do_update 1) || install_mods
    fi

    # Initialize restart time
    restart_check

    while true; do
        # Update with shutdown timer
        update_check && do_update 0

        # Sceduled restart
        restart_check && do_restart 0

        # If the Server crashes we are restarting it
        # NOTE: We are not using supervisord to handle the restart
        [[ $(check_server_running) == 1 ]] && \
                start_server

        sleep 60
    done
}

start_slave_loop() {

    notifier_info "Mode: Slave - Instance: $(hostname)"

    # Initialize restart time
    restart_check

    while true; do
        if [[ "`redis_cmd_proxy redis_get_update_running`" == 0 ]]; then
            if [[ $(check_server_running) == 0 ]]; then
                start_shutdown_timer 10
                stop_server
            fi
        # NOTE: We need to check this explcitly, when redis server is not accessible
        elif [[ "`redis_cmd_proxy redis_get_update_running`" == 1 ]]; then
            [[ $(check_server_running) == 1 ]] && \
                start_server
        fi

        # Sceduled restart
        restart_check && do_restart 0

        sleep 10
    done
}

# notifier_info "Global Master Server Instance: `get_master_server_instance`"

# if [[ "`get_master_server_instance`" == "`hostname`" ]];then
if [[ "${CONANEXILES_MASTERSERVER}" == 1 ]]; then
    start_master_loop
else
    start_slave_loop
fi
